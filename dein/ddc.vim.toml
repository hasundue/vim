[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_source = 'denops.vim'
on_event = ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineEnter', 'CmdlineChanged', 'CursorHold']
hook_source = '''
call ddc#custom#patch_global('completionMenu', 'pum.vim')

call ddc#custom#patch_global('sources', [
      \   'file',
      \   'around',
      \ ])

if has('nvim')
  call ddc#custom#patch_filetype(
        \ ['bash', 'vim', 'typescript', 'lua'], 'sources',
        \ ['nvim-lsp', 'file', 'around']
        \ )

  call ddc#custom#patch_filetype(
        \ ['markdown'], 'sources',
        \ ['nvim-lsp', 'emoji', 'around']
        \ )
endif

call ddc#custom#patch_global('cmdlineSources',
      \ ['cmdline', 'cmdline-history', 'file', 'around']
      \ )

call ddc#custom#patch_filetype(['markdown'], 'keywordPattern', '[\k:]*')

call ddc#custom#patch_global('sourceOptions', {
\   '_': {
\       'matchers': ['matcher_fuzzy'],
\       'sorters': ['sorter_fuzzy'],
\       'converters': ['converter_fuzzy'],
\   },
\   'nvim-lsp': {
\       'mark': 'L',
\       'forceCompletionPattern': '\w[\.\{\(]',
\   },
\   'around': {
\       'mark': 'A',
\   },
\   'file': {
\       'mark': 'F',
\       'isVolatile': v:true,
\       'forceCompletionPattern': '\S/\S*'
\   },
\   'emoji': {
\       'mark': 'E',
\       'matchers': ['emoji'],
\       'forceCompletionPattern': '\:\S',
\   },
\ })

call ddc#custom#patch_global('autoCompleteEvents', [
\   'InsertEnter',
\   'TextChangedI',
\   'TextChangedP',
\   'CmdlineEnter',
\   'CmdlineChanged',
\ ])

call ddc#enable()
'''
hook_add = '''
inoremap <silent><expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#manual_complete()

inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

inoremap <C-n> <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p> <Cmd>call pum#map#select_relative(-1)<CR>

"
" Commandline completion {
"
nnoremap : <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  set wildcharm=<C-t>

  cnoremap <expr> <Tab>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ exists('b:ddc_cmdline_completion') ?
        \ ddc#manual_complete() : nr2char(&wildcharm)
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

  " Overwrite sources
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('cmdlineSources',
        \ ['cmdline', 'cmdline-history', 'file', 'around'])

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
  silent! cunmap <buffer> <TAB>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif

  set wildcharm=<Tab>
endfunction

" }
'''

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'gamoutatsumi/ddc-emoji'
on_source = 'ddc.vim'
