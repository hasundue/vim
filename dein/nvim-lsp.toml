[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
depends = ['neovim/nvim-lspconfig', 'nvim-lua/plenary.nvim']

hook_add = '''
lua << EOF
local nvim_lsp = require('lspconfig')
local lsp_installer = require("nvim-lsp-installer")

local node_root_dir = nvim_lsp.util.root_pattern("package.json", "node_modules")
local buf_name = vim.api.nvim_buf_get_name(0)
local current_buf = vim.api.nvim_get_current_buf()
local is_node_repo = node_root_dir(buf_name, current_buf) ~= nil

lsp_installer.on_server_ready(function(server)
    local opts = {}

    if server.name == "tsserver" or server.name == "eslint" then
        opts.autostart = is_node_repo
    elseif server.name == "denols" then
        opts.autostart = not(is_node_repo)
        opts.init_options = { lint = true, unstable = true, }
    end

    opts.handlers = {
        ["textDocument/publishDiagnostics"] = vim.lsp.with(
            vim.lsp.diagnostic.on_publish_diagnostics, {
                signs = false,
                update_in_insert = false,
            }
        )
    }

    if server.name == "julials" then
        opts.handlers = {
            ["textDocument/publishDiagnostics"] = vim.lsp.with(
                vim.lsp.diagnostic.on_publish_diagnostics, {
                    signs = false,
                    underline = false,
                    virtual_text = false,
                    update_in_insert = false,
                }
            )
        }
    end

    server:setup(opts)
end)
EOF

nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> d? <cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
